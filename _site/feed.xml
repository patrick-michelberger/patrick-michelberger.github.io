<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Patrick Michelberger</title>
    <description></description>
    <link>http://patrick.michelberger.info/</link>
    <atom:link href="http://patrick.michelberger.info/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 02 Jun 2017 01:13:00 +0200</pubDate>
    <lastBuildDate>Fri, 02 Jun 2017 01:13:00 +0200</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Thing Translator: My Italian language assistant</title>
        <description>&lt;p&gt;For my time in beautiful Milan I built a little language assistant to improve my Italian skills in the next 6 months. It lets you take a picture of something to hear how to say it in Italian. It’s just one example of what you can make using Google’s machine learning API’s, without needing to dive into the details of machine learning.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/bottle.png&quot; class=&quot;img img-responsive&quot; style=&quot;max-width:350px;margin:0 auto;margin-bottom:25px;margin-top:25px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I plan to improve the app over the course of my stay abroad. The current code can be found here &lt;a href=&quot;https://github.com/patrick-michelberger/babel&quot; target=&quot;_blank&quot;&gt;https://github.com/patrick-michelberger/babel&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Mar 2017 13:00:00 +0100</pubDate>
        <link>http://patrick.michelberger.info/app/2017/03/03/Thing-Translator-App.html</link>
        <guid isPermaLink="true">http://patrick.michelberger.info/app/2017/03/03/Thing-Translator-App.html</guid>
        
        
        <category>app</category>
        
      </item>
    
      <item>
        <title>Building An E-Commerce App With Node.js &amp; The ABOUT YOU API</title>
        <description>&lt;p&gt;ABOUT YOU is a new fashion online shop with more than 55.000 products and offers an outstanding developer platform to create your own E-commerce app.
You write the code to build the showcase, ABOUT YOU manages the whole backend, payment &amp;amp; fulfillment process.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/1*oqu-8sEwvDuqQpTeYco5Kw.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is going to be a tutorial which consists of three parts:
Initial setup, using the ABOUT YOU SDK for Node.js and creating an UI with a shopping basket.&lt;/p&gt;

&lt;h2 id=&quot;part-i-initial-setup&quot;&gt;Part I: Initial setup&lt;/h2&gt;

&lt;p&gt;For the first part of this tutorial I show you the inital setup &amp;amp; required packages to build our Node.js web app.&lt;/p&gt;

&lt;h3 id=&quot;packages&quot;&gt;Packages&lt;/h3&gt;

&lt;p&gt;Our application uses the Express framework which can be considered the de facto standard for Node.js development.
I assume that you’ve got the node &amp;amp; npm executables setup already.&lt;/p&gt;

&lt;h3 id=&quot;installing-express&quot;&gt;Installing Express&lt;/h3&gt;

&lt;p&gt;To install Express globally use the following command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g express
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that we’re going to create a new folder and use Express to setup a default Node.js project&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir testapp
cd testapp
express --hbs
npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;app.js is basically the skeleton of your application and is mainly responsible for bootstrapping your application.
package.json contains all requirements and should look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &quot;name&quot;: &quot;testapp&quot;,
  &quot;version&quot;: &quot;0.0.0&quot;,
  &quot;private&quot;: true,
  &quot;scripts&quot;: {
    &quot;start&quot;: &quot;node ./bin/www&quot;
  },
  &quot;dependencies&quot;: {
    &quot;express&quot;: &quot;~4.9.0&quot;,
    &quot;body-parser&quot;: &quot;~1.8.1&quot;,
    &quot;cookie-parser&quot;: &quot;~1.3.3&quot;,
    &quot;morgan&quot;: “~1.3.0&quot;,
    &quot;serve-favicon&quot;: &quot;~2.1.3&quot;,
    &quot;debug&quot;: &quot;~2.0.0&quot;,
    &quot;hbs&quot;: &quot;~2.7.0&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next to Express we defined handlebars for rendering our server-side templates. In your app.js we can get rid of the following lines.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var users = require(‘./routes/users’);
app.use(&#39;/users&#39;, users);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also delete /routes/users.js as we are not going to need it for the project.
In this tutorial most of the implementation is going to happen in routes/index.js. This is the place where we define the functions to be executed when our application receives HTTP requests.
You can run the project by executing&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;in your project’s root folder and navigate to http://localhost:3000. Please note, npm start is an alias for node ./bin/www defined in the package.json file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*5Nr4CbBUkZQXfCOf9hItBA.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Congratulations, we have finished all the required setup and we can now concentrate on the ABOUT YOU SDK integration.&lt;/p&gt;

&lt;h2 id=&quot;part-ii-about-you-sdk&quot;&gt;Part II: ABOUT YOU SDK&lt;/h2&gt;

&lt;p&gt;We’re going to setup the two needed API calls to fetch you app’s categories and to execute an arbitrary product search in the following section.&lt;/p&gt;

&lt;h3 id=&quot;packages-1&quot;&gt;Packages&lt;/h3&gt;

&lt;p&gt;To get going we install the SDK via npm&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install aboutyou-sdk --save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the option —save automatically adds the module to the dependency section of our package.json file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;“aboutyou-sdk”: “^0.1.0&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your version is probably newer than 0.1.0 — it’s just the current one available right now.&lt;/p&gt;

&lt;h3 id=&quot;credentials&quot;&gt;Credentials&lt;/h3&gt;

&lt;p&gt;The use of the ABOUT YOU API requires credentials that you obtain on developer.aboutyou.de
To do so, create a new application and take a look on the overview page. There you can find your App-ID and credentials (token &amp;amp; secret).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d262ilb51hltx0.cloudfront.net/max/2000/1*PzhFtSAXlNo68a-bGfSZgQ.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For the sake of convenience we’re going to use the test credentials that allow us to access a sample’s app category &amp;amp; product catalogue.&lt;/p&gt;

&lt;h3 id=&quot;setting-up-the-configuration&quot;&gt;Setting up the configuration&lt;/h3&gt;

&lt;p&gt;We need to add the ABOUT YOU SDK to our app.js file and initialize it with our sample App-ID and token. For the sake of convenience, we intercept each http request and bind the ay object to the req parameter.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var aboutYou =
require(&#39;aboutyou-sdk&#39;)(100,&#39;3ed93394c2b5ebd12c104b177b928ad0&#39;);
// Make the AboutYou module accessible to our router
app.use(function(req,res,next){
  req.aboutYou = aboutYou;
  next();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Having made these changes the SDK is now accessible to all of our app’s routes and we’re finally ready to start our categories &amp;amp; products integration.&lt;/p&gt;

&lt;h3 id=&quot;fetching-your-apps-category-tree&quot;&gt;Fetching your app’s category tree&lt;/h3&gt;
&lt;p&gt;A category is a simple JSON object that looks like this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &quot;id&quot;: 74415,
  &quot;name&quot;: &quot;Frauen&quot;,
  &quot;active&quot;: true,
  &quot;subcategories&quot;: [{
    &quot;id&quot;: 74417,
    &quot;name&quot;: &#39;Shirts&#39;,
    &quot;active&quot;: true,
    &quot;subcategories&quot;: []
  }]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Categories are basically a defined product filter. You use them to decide which of the more than 50.000 ABOUT YOU products should be offered in your app. Lastly, they are also used as a navigation tool through your app.
You can create &amp;amp; configure them in the Developer Center:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d262ilb51hltx0.cloudfront.net/max/2000/1*eGXosh7rf5PP1Yrh4AiL-w.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you finished your categories settings you can query them through our SDK method fetchCategoryTree().
To make your category tree accessible via an API call we’ll extend index.js with a /api/categories route:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var express = require(&#39;express&#39;);
var router = express.Router();
var ay =
require(&#39;aboutyou-sdk&#39;)(100,&#39;3ed93394c2b5ebd12c104b177b928ad0&#39;);
/* GET home page. */
router.get(&#39;/&#39;, function(req, res) {
 res.render(&#39;index&#39;, { title: &#39;Express&#39; });
});
/* API */
router.get(&#39;/api/categories&#39;, function(req, res) {
 req.aboutYou.fetchCategoryTree(function(error, categoryTree) {
   var categories = categoryTree.toJSON();
   res.json(categories);
 });
});
module.exports = router;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When running your app now using npm start, you should be able to navigate over to http://localhost:3000/api/categories and should return your app’s category tree.&lt;/p&gt;

&lt;h3 id=&quot;executing-a-product-search&quot;&gt;Executing a product search&lt;/h3&gt;

&lt;p&gt;This was quite straightforward and you’ve got now all data to build a basic category navigation. Anyway, the real fun starts when we are able to display the actual products.&lt;/p&gt;

&lt;p&gt;A product is a simple JSON object that can look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  “id”: 1580329,
  “name”: “T-Shirt aus Jersey”,
  “brand”: {
    “id”: 414,
    “name”: “EDC BY ESPRIT”
  },
  “defaultImage”: {
    “url”:     “http://cdn.aboutyou.de/file/ed4745ab6847f37ec11acbf9a6002e5b&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To get this data, we need again a new route in our application and we’re going to leverage the SDK method fetchProductSearch(criteria, callback).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;router.get(&#39;/api/categories/:id/products&#39;, function(req, res) {
  var criteria = req.aboutYou.productSearchCriteria;

  // search criteria settings
  criteria.filterByCategoryIds(req.params.id);
  criteria.selectProductFields([&#39;brand_id&#39;, &#39;default_image&#39;]);
  // execute product search
  req.aboutYou.fetchProductSearch(criteria, function(err, searchResult) {
    if(!err) {
      var products = searchResult.toJSON();
      res.json(products);
    }
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are various setting options for the search criteria: An overview of the available methods can you find in the documentation.&lt;/p&gt;

&lt;h2 id=&quot;part-3&quot;&gt;Part 3&lt;/h2&gt;
&lt;p&gt;Congratulations, our application delivers category &amp;amp; product data successfully but doesn’t use any UI yet. In the last part (released very soon) of this tutorial I’m going to focus on the front-end and the interaction with our existing code.&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Feb 2016 13:00:00 +0100</pubDate>
        <link>http://patrick.michelberger.info/tutorial/2016/02/23/building-an-e-commerce-app.html</link>
        <guid isPermaLink="true">http://patrick.michelberger.info/tutorial/2016/02/23/building-an-e-commerce-app.html</guid>
        
        
        <category>tutorial</category>
        
      </item>
    
  </channel>
</rss>
